---
layout: post
title: Tree
date: 2020-06-16 01:00:00 +0300
description: "Tree"
tags: [algorithm, Tree]
img: tree.png
---

## Tree

{% highlight ruby %}

# 589. N-ary Tree Preorder Traversal

* Input: root = [1,null,3,2,4,null,5,6]
* Output: [1,3,5,6,2,4]

* Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
* Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]

# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children

# Iterative
class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        
        traversal = []
        stack = [root]
        
        while stack:
            node = stack.pop(0)
            if node:
                traversal.append(node.val) 
                stack = node.children + stack
        
        return traversal

# Recursive
class Solution:
    def preorder(self, root: 'Node') -> List[int]:

    if not root:
        return []
    
    res = []

    res.append(root.val)

    for child in root.children:
        res += self.preorder(child)
    
    return res
            
{% endhighlight %}



{% highlight ruby %}

# 107. Binary Tree Level Order Traversal II

* input: [3,9,20,null,null,15,7]
* output: [[15,7], [9,20], [3]]

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrderBottom(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        
        res = []
        stack = [root, 's']
        cur_lv = []
        
        while stack:
            cur_node = stack.pop(0)
            
            if cur_node == 's':
                res.insert(0, cur_lv)        
                cur_lv = []
                if stack:
                    stack.append('s')
            
            elif cur_node:
                cur_lv.append(cur_node.val)
                
                if cur_node.left:
                    stack.append(cur_node.left)
                if cur_node.right:
                    stack.append(cur_node.right)
        
        return res



{% endhighlight %}

{% highlight ruby %}



{% endhighlight %}

{% highlight ruby %}



{% endhighlight %}